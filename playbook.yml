---
- name: Check and Restart
  hosts: all
  gather_facts: false
  vars:
    # Default parameters, they MUST be overwrite, in order to work
    verbose: false
    cleaning: false
    database: testMerged_Dbs
    environments: testing # environment is used by Ansible
    continent: moon
    workflow: "{{ database }}_{{ environments }}_{{ continent }}"
    foundry_user: "{{ environments }}_foundry"
    base_folder: "/Users/daparici/code/local/toyproject_ansible"
    python_bin: "/Users/daparici/homebrew/bin/python3" # /Users/daparici/homebrew/bin/python3.11
  tasks:
    - name: Init --verbose # Set the variable conditionally
      ansible.builtin.set_fact:
        verbose_mode: "{{ ' --verbose' if verbose else '' }}"

    - name: Init --forceCleaning
      ansible.builtin.set_fact:
        cleaning_mode: "{{ ' --forceCleaning' if cleaning else '' }}"

    - name: Print variables
      ansible.builtin.debug:
        msg: |-
          {% for k in _my_vars %}
          {{ k }}: {{ lookup('vars', k) }}
          {% endfor %}
      vars:
        _special_vars:
          - ansible_dependent_role_names
          - ansible_play_batch
          - ansible_play_hosts
          - ansible_play_hosts_all
          - ansible_play_name
          - ansible_play_role_names
          - ansible_role_names
          - environment
          - hostvars
          - play_hosts
          - role_names
        _hostvars: "{{ hostvars[inventory_hostname].keys() }}"
        _my_vars: "{{ vars.keys() |
                      difference(_hostvars) |
                      difference(_special_vars) |
                      reject('match', '^_.*$') |
                      list |
                      sort }}"
      when: ansible_verbosity > 0

    - name: "Check the data loss for DBs, as {{ foundry_user }}"
      # https://blog.stephane-robert.info/post/ansible-module-shell-command/
      # https://ansible.readthedocs.io/projects/lint/rules/command-instead-of-shell/
      ansible.builtin.command:
        cmd: "{{ python_bin }} {{ base_folder }}/print.py --workflow {{ workflow }}{{ cleaning_mode }}{{ verbose_mode }}"
      become: true
      become_user: "{{ foundry_user }}"
      register: check_result
      changed_when: check_result.rc == 0
      failed_when: check_result.rc != 0

    - name: Debug, get stdout/stderr from the output
      ansible.builtin.debug:
        msg: "{{ check_result.stdout }}"
      when: ansible_verbosity > 1 and check_result is defined and check_result.stdout != ''

    - name: "Run the Spark submit command, as {{ foundry_user }}"
      ansible.builtin.command:
        cmd: "{{ python_bin }} {{ base_folder }}/print.py --workflow {{ workflow }}{{ cleaning_mode }}{{ verbose_mode }}"
      # https://docs.ansible.com/ansible-core/2.16/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user
      become: true
      become_user: "{{ foundry_user }}"
      register: spark_result
      changed_when: spark_result.rc == 0
      failed_when: spark_result.rc != 0

    - name: Debug, get stdout/stderr from the output
      ansible.builtin.debug:
        msg: "{{ spark_result.stdout }}"
      when: ansible_verbosity > 1 and spark_result is defined and spark_result.stdout != ''
